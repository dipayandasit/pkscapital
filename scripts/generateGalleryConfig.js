const fs = require('fs');
const path = require('path');

// This script generates the gallery configuration from images in the gallery directory
// Run this script whenever you add new images to public/images/gallery/

const galleryDir = path.join(__dirname, '../public/images/gallery');
const outputFile = path.join(__dirname, '../utils/galleryImages.js');

// Supported image extensions
const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];

// Function to generate alt text from filename
function generateAltText(filename) {
  // Remove extension and replace underscores/hyphens with spaces
  const nameWithoutExt = filename.replace(/\.[^/.]+$/, '');
  
  // Handle specific naming patterns
  if (nameWithoutExt.includes('IMG-20250917-WA0003')) {
    return 'PKS Capital Office Meeting';
  } else if (nameWithoutExt.includes('IMG-20250917-WA0004')) {
    return 'Team Collaboration Session';
  } else if (nameWithoutExt.includes('IMG-20250917-WA0005')) {
    return 'Financial Advisory Meeting';
  } else if (nameWithoutExt.includes('IMG-20250917-WA0006')) {
    return 'Strategic Planning Discussion';
  } else if (nameWithoutExt.includes('IMG-20250917-WA0007')) {
    return 'Client Presentation';
  } else if (nameWithoutExt.includes('new_paper_publications')) {
    return 'News Paper Publications';
  }
  
  // Default: format filename nicely
  return nameWithoutExt
    .replace(/[-_]/g, ' ')
    .replace(/\b\w/g, l => l.toUpperCase());
}

// Function to generate category from filename or use default
function generateCategory(filename) {
  const name = filename.toLowerCase();
  
  // Handle specific files
  if (name.includes('img-20250917-wa0003')) {
    return 'Office';
  } else if (name.includes('img-20250917-wa0004')) {
    return 'Team';
  } else if (name.includes('img-20250917-wa0005')) {
    return 'Finance';
  } else if (name.includes('img-20250917-wa0006')) {
    return 'Strategy';
  } else if (name.includes('img-20250917-wa0007')) {
    return 'Presentation';
  } else if (name.includes('new_paper_publications')) {
    return 'Media';
  }
  
  // Generic pattern matching
  if (name.includes('office') || name.includes('meeting') || name.includes('room')) {
    return 'Office';
  } else if (name.includes('team') || name.includes('staff') || name.includes('people')) {
    return 'Team';
  } else if (name.includes('finance') || name.includes('money') || name.includes('banking')) {
    return 'Finance';
  } else if (name.includes('strategy') || name.includes('planning') || name.includes('discussion')) {
    return 'Strategy';
  } else if (name.includes('presentation') || name.includes('client')) {
    return 'Presentation';
  } else if (name.includes('media') || name.includes('news') || name.includes('publication')) {
    return 'Media';
  } else {
    return 'General';
  }
}

try {
  // Read all files in the gallery directory
  const files = fs.readdirSync(galleryDir);
  
  // Filter for image files
  const imageFiles = files.filter(file => {
    const ext = path.extname(file).toLowerCase();
    return imageExtensions.includes(ext);
  });

  // Generate gallery images configuration
  const galleryImages = imageFiles.map(file => ({
    src: `/images/gallery/${file}`,
    alt: generateAltText(file),
    category: generateCategory(file)
  }));

  // Generate the JavaScript file content
  const fileContent = `// Gallery images configuration for static export
// This file is auto-generated by generateGalleryConfig.js
// Last updated: ${new Date().toISOString()}

export const galleryImages = ${JSON.stringify(galleryImages, null, 2)};

// Get all unique categories from the images
export const getCategories = () => {
  const categories = ["All", ...new Set(galleryImages.map(img => img.category))];
  return categories;
};

// Get images by category
export const getImagesByCategory = (category) => {
  if (category === "All") {
    return galleryImages;
  }
  return galleryImages.filter(img => img.category === category);
};
`;

  // Write the file
  fs.writeFileSync(outputFile, fileContent);
  
  console.log(`‚úÖ Gallery configuration generated successfully!`);
  console.log(`üìÅ Found ${imageFiles.length} images in gallery directory`);
  console.log(`üìù Updated ${outputFile}`);
  console.log('\nImages found:');
  imageFiles.forEach(file => console.log(`  - ${file}`));
  
} catch (error) {
  console.error('‚ùå Error generating gallery configuration:', error.message);
  process.exit(1);
}
